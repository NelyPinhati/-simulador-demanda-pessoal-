import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Simulador de Demanda de Pessoal - TI",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo e descri√ß√£o
st.title("üßë‚Äçüíª Simulador de Demanda Futura de Pessoal - TI")
st.markdown("""
Este simulador permite estimar a demanda futura de pessoal na √°rea de TI com base em diferentes cen√°rios.
Ajuste os par√¢metros no painel lateral e veja como a demanda de pessoal pode evoluir ao longo do tempo.
""")

# Painel lateral para entrada de par√¢metros
st.sidebar.header("Par√¢metros da Simula√ß√£o")

# N√∫mero atual de funcion√°rios
funcionarios_atuais = st.sidebar.number_input(
    "N√∫mero atual de funcion√°rios na TI",
    min_value=1,
    max_value=1000,
    value=150,
    help="Quantidade atual de funcion√°rios na √°rea de TI"
)

# Horizonte de simula√ß√£o
horizonte = st.sidebar.slider(
    "Horizonte de simula√ß√£o (meses)",
    min_value=1,
    max_value=60,
    value=24,
    help="Por quantos meses voc√™ deseja simular a demanda futura"
)

# Tipo de crescimento
tipo_crescimento = st.sidebar.radio(
    "Tipo de crescimento",
    options=["Percentual", "Baseado em projetos"],
    index=0,
    help="Escolha como o crescimento ser√° calculado"
)

if tipo_crescimento == "Percentual":
    # Taxa de crescimento mensal
    taxa_crescimento = st.sidebar.slider(
        "Taxa de crescimento mensal (%)",
        min_value=-5.0,
        max_value=10.0,
        value=1.0,
        step=0.1,
        help="Crescimento percentual mensal esperado na demanda de pessoal"
    ) / 100  # Convertendo para decimal
    
    # Varia√ß√£o sazonal
    usar_sazonalidade = st.sidebar.checkbox(
        "Incluir varia√ß√£o sazonal",
        value=False,
        help="Adiciona varia√ß√£o sazonal ao crescimento (ex: mais projetos em certos meses)"
    )
    
    if usar_sazonalidade:
        st.sidebar.markdown("#### Fatores Sazonais por M√™s")
        st.sidebar.markdown("Ajuste os fatores para cada m√™s (1.0 = normal, >1.0 = maior demanda, <1.0 = menor demanda)")
        
        # Criar sliders para cada m√™s
        fatores_sazonais = {}
        for mes in ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]:
            # Valores padr√£o que simulam um padr√£o sazonal comum em TI
            valor_padrao = 1.0
            if mes in ["Jan", "Fev"]:  # In√≠cio do ano, menos projetos
                valor_padrao = 0.9
            elif mes in ["Mar", "Abr", "Mai"]:  # Crescimento no Q2
                valor_padrao = 1.1
            elif mes in ["Nov", "Dez"]:  # Final de ano, menos projetos novos
                valor_padrao = 0.8
                
            fatores_sazonais[mes] = st.sidebar.slider(
                mes,
                min_value=0.5,
                max_value=1.5,
                value=valor_padrao,
                step=0.05
            )
    else:
        fatores_sazonais = {mes: 1.0 for mes in ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]}

else:  # Baseado em projetos
    # Projetos atuais
    projetos_atuais = st.sidebar.number_input(
        "N√∫mero atual de projetos",
        min_value=1,
        max_value=100,
        value=10,
        help="Quantidade atual de projetos ativos"
    )
    
    # Crescimento de projetos
    crescimento_projetos = st.sidebar.slider(
        "Crescimento mensal de projetos",
        min_value=-2,
        max_value=5,
        value=1,
        help="Quantos projetos novos (ou encerrados se negativo) por m√™s em m√©dia"
    )
    
    # Funcion√°rios por projeto
    func_por_projeto = st.sidebar.slider(
        "Funcion√°rios m√©dios por projeto",
        min_value=1,
        max_value=20,
        value=5,
        help="Quantos funcion√°rios s√£o necess√°rios, em m√©dia, por projeto"
    )

# Taxa de turnover
taxa_turnover = st.sidebar.slider(
    "Taxa de turnover mensal (%)",
    min_value=0.0,
    max_value=10.0,
    value=2.0,
    step=0.1,
    help="Percentual de funcion√°rios que deixam a empresa mensalmente"
) / 100  # Convertendo para decimal

# Tempo m√©dio para contratar
tempo_contratacao = st.sidebar.slider(
    "Tempo m√©dio para contratar (meses)",
    min_value=0.5,
    max_value=6.0,
    value=2.0,
    step=0.5,
    help="Quanto tempo leva, em m√©dia, para contratar um novo funcion√°rio"
)

# Contrata√ß√µes planejadas
st.sidebar.markdown("#### Contrata√ß√µes Planejadas")
usar_contratacoes_planejadas = st.sidebar.checkbox(
    "Incluir contrata√ß√µes j√° planejadas",
    value=False
)

contratacoes_planejadas = {}
if usar_contratacoes_planejadas:
    # Obter data atual
    data_atual = datetime.now()
    
    # Criar campos para os pr√≥ximos 6 meses
    for i in range(6):
        mes_futuro = data_atual + timedelta(days=30*i)
        nome_mes = mes_futuro.strftime("%b/%Y")
        
        contratacoes_planejadas[nome_mes] = st.sidebar.number_input(
            f"Contrata√ß√µes em {nome_mes}",
            min_value=0,
            max_value=50,
            value=0
        )

# Bot√£o para executar a simula√ß√£o
st.sidebar.markdown("---")
executar = st.sidebar.button("Executar Simula√ß√£o", type="primary")

# Fun√ß√£o para calcular a simula√ß√£o
def simular_demanda():
    # Criar dataframe para armazenar resultados
    data_atual = datetime.now()
    datas = [data_atual + timedelta(days=30*i) for i in range(horizonte)]
    
    df = pd.DataFrame({
        'Data': datas,
        'M√™s': [d.strftime("%b/%Y") for d in datas],
        'M√™s_Num': [d.month for d in datas],
        'Funcion√°rios': [funcionarios_atuais] + [0] * (horizonte - 1),
        'Sa√≠das': [0] * horizonte,
        'Contrata√ß√µes': [0] * horizonte,
        'Demanda': [funcionarios_atuais] + [0] * (horizonte - 1)
    })
    
    # Mapear nomes dos meses para fatores sazonais
    meses_abrev = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
    df['Fator_Sazonal'] = df['M√™s_Num'].apply(lambda x: fatores_sazonais[meses_abrev[x-1]])
    
    # Adicionar contrata√ß√µes planejadas
    if usar_contratacoes_planejadas:
        for mes, qtd in contratacoes_planejadas.items():
            if qtd > 0:
                idx = df[df['M√™s'] == mes].index
                if len(idx) > 0:
                    df.loc[idx, 'Contrata√ß√µes'] += qtd
    
    # Calcular a evolu√ß√£o m√™s a m√™s
    if tipo_crescimento == "Percentual":
        # Inicializar vari√°veis para controle de contrata√ß√µes em andamento
        contratacoes_em_andamento = []
        
        for i in range(1, horizonte):
            # Calcular sa√≠das (turnover)
            saidas = round(df.loc[i-1, 'Funcion√°rios'] * taxa_turnover)
            df.loc[i, 'Sa√≠das'] = saidas
            
            # Calcular crescimento com fator sazonal
            crescimento_base = df.loc[i-1, 'Funcion√°rios'] * taxa_crescimento
            crescimento_ajustado = crescimento_base * df.loc[i, 'Fator_Sazonal']
            
            # Calcular demanda ideal (considerando crescimento e sa√≠das)
            demanda_ideal = df.loc[i-1, 'Funcion√°rios'] + crescimento_ajustado
            df.loc[i, 'Demanda'] = round(demanda_ideal)
            
            # Processar contrata√ß√µes em andamento que chegam neste m√™s
            contratacoes_concluidas = 0
            novas_contratacoes_em_andamento = []
            
            for tempo_restante, qtd in contratacoes_em_andamento:
                if tempo_restante <= 1:
                    contratacoes_concluidas += qtd
                else:
                    novas_contratacoes_em_andamento.append((tempo_restante - 1, qtd))
            
            contratacoes_em_andamento = novas_contratacoes_em_andamento
            
            # Adicionar contrata√ß√µes planejadas que chegam neste m√™s
            contratacoes_concluidas += df.loc[i, 'Contrata√ß√µes']
            
            # Calcular d√©ficit (quantos funcion√°rios faltam para atingir a demanda)
            funcionarios_sem_novas_contratacoes = df.loc[i-1, 'Funcion√°rios'] - saidas + contratacoes_concluidas
            deficit = max(0, df.loc[i, 'Demanda'] - funcionarios_sem_novas_contratacoes)
            
            # Iniciar novas contrata√ß√µes para cobrir o d√©ficit
            if deficit > 0 and tempo_contratacao > 0:
                contratacoes_em_andamento.append((tempo_contratacao, deficit))
            
            # Atualizar n√∫mero de funcion√°rios
            df.loc[i, 'Funcion√°rios'] = funcionarios_sem_novas_contratacoes
            
            # Registrar contrata√ß√µes conclu√≠das neste m√™s
            df.loc[i, 'Contrata√ß√µes'] = contratacoes_concluidas
    
    else:  # Baseado em projetos
        # Calcular evolu√ß√£o de projetos
        projetos = [projetos_atuais]
        for i in range(1, horizonte):
            projetos.append(max(0, projetos[i-1] + crescimento_projetos))
        
        df['Projetos'] = projetos
        df['Demanda'] = df['Projetos'] * func_por_projeto
        
        # Inicializar vari√°veis para controle de contrata√ß√µes em andamento
        contratacoes_em_andamento = []
        
        for i in range(1, horizonte):
            # Calcular sa√≠das (turnover)
            saidas = round(df.loc[i-1, 'Funcion√°rios'] * taxa_turnover)
            df.loc[i, 'Sa√≠das'] = saidas
            
            # Processar contrata√ß√µes em andamento que chegam neste m√™s
            contratacoes_concluidas = 0
            novas_contratacoes_em_andamento = []
            
            for tempo_restante, qtd in contratacoes_em_andamento:
                if tempo_restante <= 1:
                    contratacoes_concluidas += qtd
                else:
                    novas_contratacoes_em_andamento.append((tempo_restante - 1, qtd))
            
            contratacoes_em_andamento = novas_contratacoes_em_andamento
            
            # Adicionar contrata√ß√µes planejadas que chegam neste m√™s
            contratacoes_concluidas += df.loc[i, 'Contrata√ß√µes']
            
            # Calcular d√©ficit (quantos funcion√°rios faltam para atingir a demanda)
            funcionarios_sem_novas_contratacoes = df.loc[i-1, 'Funcion√°rios'] - saidas + contratacoes_concluidas
            deficit = max(0, df.loc[i, 'Demanda'] - funcionarios_sem_novas_contratacoes)
            
            # Iniciar novas contrata√ß√µes para cobrir o d√©ficit
            if deficit > 0 and tempo_contratacao > 0:
                contratacoes_em_andamento.append((tempo_contratacao, deficit))
            
            # Atualizar n√∫mero de funcion√°rios
            df.loc[i, 'Funcion√°rios'] = funcionarios_sem_novas_contratacoes
            
            # Registrar contrata√ß√µes conclu√≠das neste m√™s
            df.loc[i, 'Contrata√ß√µes'] = contratacoes_concluidas
    
    # Calcular m√©tricas adicionais
    df['D√©ficit'] = df['Demanda'] - df['Funcion√°rios']
    df['Taxa_Cobertura'] = (df['Funcion√°rios'] / df['Demanda']).clip(0, 1)
    
    return df

# Executar simula√ß√£o quando o bot√£o for clicado
if executar:
    with st.spinner("Executando simula√ß√£o..."):
        resultados = simular_demanda()
    
    # Exibir resultados
    st.markdown("## Resultados da Simula√ß√£o")
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric(
            "Funcion√°rios Iniciais", 
            f"{funcionarios_atuais}"
        )
    with col2:
        st.metric(
            "Funcion√°rios ao Final", 
            f"{resultados['Funcion√°rios'].iloc[-1]}", 
            delta=f"{resultados['Funcion√°rios'].iloc[-1] - funcionarios_atuais}"
        )
    with col3:
        st.metric(
            "Demanda ao Final", 
            f"{resultados['Demanda'].iloc[-1]}", 
            delta=f"{resultados['Demanda'].iloc[-1] - funcionarios_atuais}"
        )
    with col4:
        deficit_final = resultados['D√©ficit'].iloc[-1]
        st.metric(
            "D√©ficit ao Final", 
            f"{deficit_final}", 
            delta=f"{-deficit_final}" if deficit_final > 0 else None,
            delta_color="inverse"
        )
    
    # Gr√°fico de evolu√ß√£o
    st.markdown("### Evolu√ß√£o da Demanda vs. Funcion√°rios Dispon√≠veis")
    
    fig = go.Figure()
    
    # Adicionar linha de demanda
    fig.add_trace(go.Scatter(
        x=resultados['M√™s'],
        y=resultados['Demanda'],
        mode='lines+markers',
        name='Demanda Prevista',
        line=dict(color='#FF4B4B', width=3),
        marker=dict(size=8)
    ))
    
    # Adicionar linha de funcion√°rios
    fig.add_trace(go.Scatter(
        x=resultados['M√™s'],
        y=resultados['Funcion√°rios'],
        mode='lines+markers',
        name='Funcion√°rios Dispon√≠veis',
        line=dict(color='#4B4BFF', width=3),
        marker=dict(size=8)
    ))
    
    # Adicionar √°rea de d√©ficit
    deficit_y = []
    for i in range(len(resultados)):
        if resultados['D√©ficit'].iloc[i] > 0:
            deficit_y.append(resultados['Funcion√°rios'].iloc[i])
        else:
            deficit_y.append(None)
    
    fig.add_trace(go.Scatter(
        x=resultados['M√™s'],
        y=resultados['Demanda'],
        mode='none',
        name='√Årea de D√©ficit',
        fill='tonexty',
        fillcolor='rgba(255, 0, 0, 0.2)',
        showlegend=True
    ))
    
    fig.add_trace(go.Scatter(
        x=resultados['M√™s'],
        y=deficit_y,
        mode='none',
        showlegend=False
    ))
    
    # Configurar layout
    fig.update_layout(
        title='Evolu√ß√£o da Demanda vs. Funcion√°rios Dispon√≠veis',
        xaxis_title='M√™s',
        yaxis_title='N√∫mero de Funcion√°rios',
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        height=500
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Gr√°fico de contrata√ß√µes e sa√≠das
    st.markdown("### Contrata√ß√µes e Sa√≠das Mensais")
    
    fig2 = go.Figure()
    
    # Adicionar barras de contrata√ß√µes
    fig2.add_trace(go.Bar(
        x=resultados['M√™s'],
        y=resultados['Contrata√ß√µes'],
        name='Contrata√ß√µes',
        marker_color='#4CAF50'
    ))
    
    # Adicionar barras de sa√≠das
    fig2.add_trace(go.Bar(
        x=resultados['M√™s'],
        y=resultados['Sa√≠das'],
        name='Sa√≠das (Turnover)',
        marker_color='#FF5722'
    ))
    
    # Configurar layout
    fig2.update_layout(
        title='Contrata√ß√µes e Sa√≠das Mensais',
        xaxis_title='M√™s',
        yaxis_title='N√∫mero de Funcion√°rios',
        barmode='group',
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        height=400
    )
    
    st.plotly_chart(fig2, use_container_width=True)
    
    # Tabela de dados
    st.markdown("### Dados Detalhados da Simula√ß√£o")
    
    # Preparar tabela para exibi√ß√£o
    tabela_exibicao = resultados[['M√™s', 'Funcion√°rios', 'Demanda', 'D√©ficit', 'Contrata√ß√µes', 'Sa√≠das']]
    tabela_exibicao = tabela_exibicao.rename(columns={
        'M√™s': 'M√™s/Ano',
        'Funcion√°rios': 'Funcion√°rios Dispon√≠veis',
        'Demanda': 'Demanda Prevista',
        'D√©ficit': 'D√©ficit de Pessoal',
        'Contrata√ß√µes': 'Contrata√ß√µes Conclu√≠das',
        'Sa√≠das': 'Sa√≠das (Turnover)'
    })
    
    # Exibir tabela com formata√ß√£o condicional
    st.dataframe(
        tabela_exibicao.style.background_gradient(
            subset=['D√©ficit de Pessoal'], 
            cmap='Reds',
            vmin=0,
            vmax=tabela_exibicao['D√©ficit de Pessoal'].max() if tabela_exibicao['D√©ficit de Pessoal'].max() > 0 else 1
        ),
        use_container_width=True
    )
    
    # Insights e recomenda√ß√µes
    st.markdown("## Insights e Recomenda√ß√µes")
    
    # Calcular m√©tricas para insights
    deficit_maximo = resultados['D√©ficit'].max()
    mes_deficit_maximo = resultados.loc[resultados['D√©ficit'].idxmax(), 'M√™s']
    meses_com_deficit = resultados[resultados['D√©ficit'] > 0].shape[0]
    percentual_meses_com_deficit = (meses_com_deficit / horizonte) * 100
    
    # Gerar insights baseados nos resultados
    insights = []
    
    if deficit_maximo > 0:
        insights.append(f"üìä **D√©ficit M√°ximo:** A simula√ß√£o prev√™ um d√©ficit m√°ximo de {deficit_maximo} funcion√°rios em {mes_deficit_maximo}.")
    
    if percentual_meses_com_deficit > 0:
        insights.append(f"‚è±Ô∏è **Per√≠odo de D√©ficit:** Em {percentual_meses_com_deficit:.1f}% dos meses simulados ({meses_com_deficit} de {horizonte}), a equipe estar√° abaixo da demanda prevista.")
    
    if tempo_contratacao > 1:
        insights.append(f"‚ö†Ô∏è **Tempo de Contrata√ß√£o:** O tempo m√©dio de contrata√ß√£o de {tempo_contratacao} meses significa que voc√™ precisa iniciar o processo de recrutamento com anteced√™ncia para evitar d√©ficits.")
    
    if taxa_turnover > 0.02:  # 2% ao m√™s √© considerado alto
        insights.append(f"üö™ **Turnover Elevado:** A taxa de turnover de {taxa_turnover*100:.1f}% ao m√™s √© significativa e pode estar impactando a capacidade de manter a equipe adequada.")
    
    # Exibir insights
    for insight in insights:
        st.markdown(insight)
    
    # Recomenda√ß√µes
    st.markdown("### Recomenda√ß√µes")
    
    recomendacoes = []
    
    if deficit_maximo > 10:
        recomendacoes.append("üî¥ **A√ß√£o Urgente:** O d√©ficit projetado √© muito alto. Considere iniciar um programa de contrata√ß√£o acelerada ou rever a distribui√ß√£o de projetos.")
    elif deficit_maximo > 5:
        recomendacoes.append("üü† **Aten√ß√£o:** O d√©ficit projetado √© significativo. Planeje contrata√ß√µes adicionais ou considere terceiriza√ß√£o para per√≠odos de pico.")
    elif deficit_maximo > 0:
        recomendacoes.append("üü° **Monitoramento:** H√° um pequeno d√©ficit projetado. Monitore a situa√ß√£o e prepare-se para contratar conforme necess√°rio.")
    else:
        recomendacoes.append("üü¢ **Equipe Adequada:** A simula√ß√£o n√£o prev√™ d√©ficit de pessoal no per√≠odo analisado.")
    
    if tempo_contratacao > 2:
        recomendacoes.append("‚è±Ô∏è **Processo de Contrata√ß√£o:** Considere otimizar o processo de recrutamento para reduzir o tempo m√©dio de contrata√ß√£o.")
    
    if taxa_turnover > 0.03:  # 3% ao m√™s
        recomendacoes.append("üö™ **Reten√ß√£o de Talentos:** Implemente estrat√©gias para reduzir o turnover, como programas de desenvolvimento, ajustes salariais ou melhorias no ambiente de trabalho.")
    
    # Exibir recomenda√ß√µes
    for recomendacao in recomendacoes:
        st.markdown(recomendacao)
    
    # Exportar dados
    st.markdown("### Exportar Resultados")
    
    csv = resultados.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• Baixar dados da simula√ß√£o (CSV)",
        data=csv,
        file_name=f"simulacao_demanda_pessoal_{datetime.now().strftime('%Y%m%d')}.csv",
        mime="text/csv",
    )

else:
    # Mensagem inicial quando a aplica√ß√£o √© carregada
    st.info("üëà Ajuste os par√¢metros no painel lateral e clique em 'Executar Simula√ß√£o' para ver os resultados.")
    
    # Explica√ß√£o sobre o simulador
    st.markdown("""
    ## Como usar este simulador
    
    Este simulador de demanda de pessoal permite que voc√™:
    
    1. **Defina cen√°rios:** Ajuste par√¢metros como taxa de crescimento, turnover e tempo de contrata√ß√£o.
    2. **Visualize tend√™ncias:** Veja gr√°ficos da evolu√ß√£o da demanda vs. disponibilidade de pessoal.
    3. **Identifique d√©ficits:** Descubra quando e onde podem ocorrer faltas de pessoal.
    4. **Planeje contrata√ß√µes:** Determine quando iniciar processos de recrutamento.
    
    ### Par√¢metros importantes
    
    - **Taxa de crescimento:** Quanto a demanda aumenta mensalmente (%).
    - **Taxa de turnover:** Percentual de funcion√°rios que deixam a empresa por m√™s.
    - **Tempo de contrata√ß√£o:** Quantos meses leva para contratar um novo funcion√°rio.
    - **Contrata√ß√µes planejadas:** Contrata√ß√µes j√° aprovadas para os pr√≥ximos meses.
    
    ### Interpretando os resultados
    
    - **D√©ficit de pessoal:** Diferen√ßa entre a demanda prevista e os funcion√°rios dispon√≠veis.
    - **Taxa de cobertura:** Percentual da demanda que est√° sendo atendida pela equipe atual.
    - **Insights e recomenda√ß√µes:** Sugest√µes baseadas nos resultados da simula√ß√£o.
    """)
